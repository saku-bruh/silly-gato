/* =========================================================================
Â  Â thiscatdoesnotexist
Â  Â ========================================================================= */
const $ Â = (sel, ctx=document) => ctx.querySelector(sel);
const $$ = (sel, ctx=document) => [...ctx.querySelectorAll(sel)];

/* --------------------------- Â Constants Â ------------------------------ */
const CAT_ENDPOINT Â  Â  = 'https://cataas.com/cat';
const FACT_ENDPOINT Â  Â = 'https://catfact.ninja/fact';
const BOOK_KEY Â  Â  Â  Â  = 'bookCats';
const THEME_KEY Â  Â  Â  Â = 'themePref';
const MAX_ALBUM_CLICKS = 10;
const CONFETTI_BATCH Â  = 25;
const CONFETTI_TOTAL Â  = 400;

/* --------------------------- Â Elements Â ------------------------------- */
const body Â  Â  Â = document.body;
const img Â  Â  Â  = $('#cat');
const namingControls = $('.naming-controls'); // Select the container
const catName Â  = $('#catName');
const loader Â  Â = $('#frame .loader');
const btnMore Â  = $('#btnMore');
const btnSave Â  = $('#btnSave');
const gifToggle = $('#gifToggle');
const factNode Â = $('#catFact');
const grid Â  Â  Â = $('#bookmarkGrid');
const btnClear Â = $('#btnClear');
const albumGrid = $('#albumGrid');
const footer Â  Â = $('#siteFooter');
const meowSfx Â  = $('#meowSfx');
const themeToggle = $('#themeToggle');
const themeLabel = $('#themeLabel');

/* Overlay Elements */
const overlay Â  Â  Â = $('#overlay');
const overlayImg Â  = $('#overlayImg');
const overlayClose = $('#overlayClose');

/* ------------------------ Â State Variables Â --------------------------- */
const panels = {random:$('#random'),bookmarks:$('#bookmarks'),album:$('#album'),notFound:$('#notFound')};
const tabBtns = $$('nav button');
let albumClicks=0, albumBuilt=false, bookBuilt=false;
let currentImageURI = '';

/* ------------------------ Â Tab system Â ------------------------------- */
tabBtns.forEach(b=>b.addEventListener('click',()=>switchTab(b.dataset.tab)));
function switchTab(t){
Â  if(t==='album' && ++albumClicks%MAX_ALBUM_CLICKS===0){t='notFound';confetti();}
Â  tabBtns.forEach(b=>b.classList.toggle('active',b.dataset.tab===t));
Â  Object.entries(panels).forEach(([k,el])=>el.hidden=k!==t);
Â  footer.hidden=t!=='random';
Â  if(t==='album'&&!albumBuilt) buildAlbum();
Â  if(t==='bookmarks'&&!bookBuilt) loadBookmarks();
}

/* ------------------ Â Random cat logic Â ------------------------------- */
function fetchCat(){
Â  loader.hidden=false;
Â  img.classList.remove('loaded');
Â  btnMore.disabled=true;
Â  currentImageURI = '';
Â  catName.value = '';
  updateNamingControls();

Â  const src=gifToggle.checked
Â  Â  ?`${CAT_ENDPOINT}/gif?_=${Date.now()}`
Â  Â  :`${CAT_ENDPOINT}?width=${500+rand(200)}&height=${350+rand(150)}&_=${Date.now()}`;

Â  img.crossOrigin='anonymous';
Â  img.src=src;
Â  img.alt=gifToggle.checked?'A wild cat GIF!':'A wild gato appears!';
Â  updateSaveBtn();
Â  fetchFact();
}

img.addEventListener('load',()=>{
Â  loader.hidden=true;
Â  img.classList.add('loaded');
Â  btnMore.disabled=false;
Â  currentImageURI = canvasFromImage(img);
Â  updateSaveBtn();
});

img.addEventListener('error',()=>{toast('Cat escaped â€” retrying');setTimeout(fetchCat,1600);});
gifToggle.addEventListener('change',fetchCat);
btnMore.addEventListener('click',()=>{playSound(meowSfx); fetchCat();});

// Updated function to hide/show the entire naming container
function updateNamingControls() {
    namingControls.hidden = gifToggle.checked;
}

/* ------------------------ Â Sound Effects Â ---------------------------- */
function playSound(audioEl) {
Â  Â  audioEl.currentTime = 0;
Â  Â  audioEl.play().catch(e => console.log("Sound play failed:", e));
}

/* ------------------------ Â Cat facts Â -------------------------------- */
async function fetchFact(){
Â  try{
Â  Â  const ctl=new AbortController();const t=setTimeout(()=>ctl.abort(),4500);
Â  Â  const res=await fetch(FACT_ENDPOINT,{signal:ctl.signal});clearTimeout(t);
Â  Â  const {fact}=await res.json();
Â  Â  factNode.textContent=`random cat fact: ${fact}`;
Â  }catch{
Â  Â  factNode.textContent='random cat fact: the internet cats are sleeping ðŸ˜º';
Â  }
}

/* ------------------------ Â Bookmarks Â -------------------------------- */
btnSave.addEventListener('click',()=>{
Â  if(btnSave.disabled)return;
Â  playSound(meowSfx);
Â  const name = catName.value.trim() || 'Unnamed Cat';
Â  const newBookmark = { src: currentImageURI, name };
Â  const list = getBooks();
Â  
Â  if(!list.some(b => b.src === currentImageURI)){
Â  Â  Â  list.push(newBookmark);
Â  Â  Â  setBooks(list);
Â  Â  Â  if (bookBuilt) {
Â  Â  Â  Â  Â  addThumb(grid, newBookmark);
Â  Â  Â  }
Â  Â  Â  toast('bookmarked!');
Â  } else {
Â  Â  Â  toast('You already bookmarked this cat!');
Â  }
Â  
Â  updateSaveBtn();
Â  updateClear();
});

btnClear.addEventListener('click',()=>{
Â  Â  setBooks([]);
Â  Â  grid.innerHTML='';
Â  Â  updateClear();
Â  Â  toast('bookmarks cleared');
Â  Â  updateSaveBtn();
});

function loadBookmarks(){
Â  Â  grid.innerHTML = '';
Â  Â  getBooks().forEach(bookmark=>addThumb(grid,bookmark));
Â  Â  bookBuilt=true;
Â  Â  updateClear();
}

function updateSaveBtn(){
Â  Â  const isAlreadyBookmarked = getBooks().some(b => b.src === currentImageURI);
Â  Â  btnSave.disabled = gifToggle.checked || !img.complete || !currentImageURI || isAlreadyBookmarked;
}

function updateClear(){btnClear.disabled=getBooks().length===0;}
function getBooks(){try{return JSON.parse(localStorage.getItem(BOOK_KEY)||'[]');}catch{return[];}}
function setBooks(a){localStorage.setItem(BOOK_KEY,JSON.stringify(a));}

/* ----------------- Â Album build Â ------------------------------------ */
const ALBUM_IMGS=[{src:'mycat/1.jpg'},{src:'mycat/2.jpg'},{src:'mycat/3.jpg'}];
function buildAlbum(){ALBUM_IMGS.forEach(img=>addThumb(albumGrid,img,true));albumBuilt=true;}

/* ----------------- Â Confetti Â --------------------------------------- */
let confettiOn=false;
function confetti(){
Â  if(confettiOn)return;confettiOn=true;
Â  let spawned=0;
Â  (function loop(){
Â  Â  for(let i=0;i<CONFETTI_BATCH&&spawned<CONFETTI_TOTAL;i++,spawned++)
Â  Â  Â  document.body.appendChild(piece());
Â  Â  if(spawned<CONFETTI_TOTAL)requestAnimationFrame(loop);
Â  Â  else setTimeout(()=>confettiOn=false,3600);
Â  })();
}
function piece(){
Â  const d=document.createElement('div');d.className='confetti';
Â  d.style.left=`${Math.random()*100}vw`;
Â  d.style.background=`hsl(${Math.random()*360},80%,60%)`;
Â  d.style.animationDelay=`${Math.random()}s`;
Â  d.style.animationDuration=`${2.5+Math.random()*2}s`;
Â  d.onanimationend=()=>d.remove();
Â  return d;
}

/* -------------- Â Overlay helpers (thumbnails only) Â ----------------- */
function openOverlay(src){
Â  if(!overlay||!overlayImg)return;
Â  overlayImg.src=src;overlay.hidden=false;document.body.style.overflow='hidden';
}
function closeOverlay(){
Â  if(!overlay)return;
Â  overlay.hidden=true;overlayImg.src='';document.body.style.overflow='';
}
if(overlayClose){
Â  overlayClose.addEventListener('click',closeOverlay);
Â  overlay.addEventListener('click',e=>{if(e.target===overlay)closeOverlay();});
Â  document.addEventListener('keydown',e=>{if(e.key==='Escape'&&!overlay.hidden)closeOverlay();});
}

/* ----------------------- Â Toast Â ------------------------------------ */
const toastNode=$('#toast');
function toast(msg,ms=3000){
Â  toastNode.textContent=msg;toastNode.hidden=false;toastNode.classList.add('show');
Â  setTimeout(()=>toastNode.classList.remove('show'),ms);
}

/* ---------------- Â Utilities Â --------------------------------------- */
function rand(m){return Math.floor(Math.random()*m);}

function addThumb(parent, bookmark, isAlbum=false){
Â  const container = document.createElement('div');
Â  container.className = 'bookmark-item';

Â  const pic = new Image();
Â  pic.loading = 'lazy';
Â  pic.src = bookmark.src;
Â  pic.alt = bookmark.name || 'cat';
Â  pic.onload = () => pic.classList.add('loaded');
Â  pic.addEventListener('click',()=>openOverlay(bookmark.src));
Â  
Â  container.appendChild(pic);

Â  if (!isAlbum) {
Â  Â  Â  const caption = document.createElement('div');
Â  Â  Â  caption.className = 'bookmark-caption';
Â  Â  Â  caption.textContent = bookmark.name;
Â  Â  Â  container.appendChild(caption);

Â  Â  Â  const downloadBtn = document.createElement('button');
Â  Â  Â  downloadBtn.className = 'download-btn';
Â  Â  Â  downloadBtn.setAttribute('aria-label', `Download ${bookmark.name}`);
Â  Â  Â  downloadBtn.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>`;
Â  Â  Â  downloadBtn.addEventListener('click', (e) => {
Â  Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  Â  const a = document.createElement('a');
Â  Â  Â  Â  Â  a.href = bookmark.src;
Â  Â  Â  Â  Â  a.download = `${bookmark.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.png`;
Â  Â  Â  Â  Â  document.body.appendChild(a);
Â  Â  Â  Â  Â  a.click();
Â  Â  Â  Â  Â  document.body.removeChild(a);
Â  Â  Â  Â  Â  toast(`Downloading ${bookmark.name}...`);
Â  Â  Â  });
Â  Â  Â  container.appendChild(downloadBtn);

Â  Â  Â  const deleteBtn = document.createElement('button');
Â  Â  Â  deleteBtn.className = 'delete-btn';
Â  Â  Â  deleteBtn.setAttribute('aria-label', `Delete ${bookmark.name}`);
Â  Â  Â  deleteBtn.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor"><path d="M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z"/></svg>`;
Â  Â  Â  deleteBtn.addEventListener('click', (e) => {
Â  Â  Â  Â  Â  e.stopPropagation();
Â  Â  Â  Â  Â  const allBookmarks = getBooks();
Â  Â  Â  Â  Â  const filteredBookmarks = allBookmarks.filter(b => b.src !== bookmark.src);
Â  Â  Â  Â  Â  setBooks(filteredBookmarks);
Â  Â  Â  Â  Â  container.remove();
Â  Â  Â  Â  Â  updateClear();
Â  Â  Â  Â  Â  updateSaveBtn();
Â  Â  Â  Â  Â  toast('Bookmark removed!');
Â  Â  Â  });
Â  Â  Â  container.appendChild(deleteBtn);
Â  }
Â  
Â  parent.appendChild(container);
}

function canvasFromImage(im){
Â  const c=document.createElement('canvas');
Â  c.width=im.naturalWidth;c.height=im.naturalHeight;
Â  c.getContext('2d').drawImage(im,0,0);
Â  return c.toDataURL('image/png');
}

/* ---------------- Â Theme Toggle Logic Â ----------------------------- */
function applyTheme(theme) {
Â  Â  if (theme === 'light') {
Â  Â  Â  Â  body.classList.add('light-theme');
Â  Â  Â  Â  themeToggle.checked = false;
Â  Â  Â  Â  themeLabel.textContent = 'light mode';
Â  Â  } else {
Â  Â  Â  Â  body.classList.remove('light-theme');
Â  Â  Â  Â  themeToggle.checked = true;
Â  Â  Â  Â  themeLabel.textContent = 'dark mode';
Â  Â  }
}
function toggleTheme() {
Â  Â  const newTheme = body.classList.contains('light-theme') ? 'dark' : 'light';
Â  Â  applyTheme(newTheme);
Â  Â  localStorage.setItem(THEME_KEY, newTheme);
}
themeToggle.addEventListener('change', toggleTheme);

function initTheme() {
Â  Â  const savedTheme = localStorage.getItem(THEME_KEY) || 'dark';
Â  Â  applyTheme(savedTheme);
}

/* ---------------- Â Kick-off Â ---------------------------------------- */
initTheme();
fetchCat();
switchTab('random');